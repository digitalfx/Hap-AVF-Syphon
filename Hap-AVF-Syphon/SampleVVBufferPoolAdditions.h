/*		this is sample code demonstrating how to use the VVBufferPool framework to "wrap" 
graphic/image resources generated by other APIs.  in these examples (Syphon and VVFFGL), this is 
very nearly a zero-cost operation: VVBuffer is basically just retaining the underlying graphic 
resource, and is merely populated with its properties.		*/
#import <Cocoa/Cocoa.h>
#import <VVBufferPool/VVBufferPool.h>
#import <HapInAVFoundation/HapInAVFoundation.h>


/*	these are class additions to VVBufferPool- these are how you create VVBuffer resources from 
Syphon or VVFFGL resources.  going the "other way"- creating syphon/VVFFGL image resources from 
VVBuffer instances- is beyond the scope of this example, but quite painless since VVBuffer is just a 
wrapper around GL resources.  wrap the VVBuffer with your image format of choice, and when you're 
done, free the VVBuffer instance- the underlying resources will be pooled or freed by the buffer pool.		*/
@interface VVBufferPool (VVBufferPoolAdditions)

- (VVBuffer *) allocBufferForPlane:(int)pi inHapDecoderFrame:(HapDecoderFrame *)n;
- (NSArray *) createBuffersForHapDecoderFrame:(HapDecoderFrame *)n;

@end
